<!DOCTYPE html>
<html lang="en">

<head>
    <title>Geodesignhub Subsurface Viewer</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Raleway' rel='stylesheet' type='text/css'>
    <link rel="apple-touch-icon" sizes="57x57" href="assets/objs/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="assets/objs/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="assets/objs/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="assets/objs/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="assets/objs/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="assets/objs/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="assets/objs/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="assets/objs/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="assets/objs/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192" href="assets/objs/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="assets/objs/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="assets/objs/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="assets/objs/favicon-16x16.png">
    <link rel="manifest" href="assets/objs/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="assets/objs/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
    <link type="text/css" rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/style.css">
    <link rel="stylesheet" type="text/css" href="assets/css/base.css">

    <link rel="stylesheet" href="/assets/js/humane/flatty.css">

    <script type="text/javascript" src="/assets/js/jquery/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/js/geojsonlint/geojsonlint.js"></script>
    <script type="text/javascript" src="/assets/js/humane/humane.min.js"></script>

    <script src="/assets/Build/Cesium/Cesium.js"></script>
    <style>
        @import url(/assets/Build/Cesium/Widgets/widgets.css);

        #toolbar {
            position: absolute;
            top: 5px;
            right: 20px;
            background: rgba(42, 42, 42, 0.8);
            padding: 2px 2px;
            border-radius: 2px;
            color: #9370DB;
        }

        #controlPanel span {
            color: white;
        }

        #controlPanel p {
            margin: 0;
        }

        .densitydetails {
            border-bottom: 1px solid #e0e0e0;
        }

        .systitle {
            border-bottom: 1px solid #e0e0e0;
            font-size: 16px;
            padding-bottom: 5px;
            padding-top: 5px;
        }

        /* #toolbar {
            background: rgba(42, 42, 42, 0.8);
            padding: 4px;
            border-radius: 4px;
        } */

        #toolbar input {
            vertical-align: middle;
            padding-top: 2px;
            padding-bottom: 2px;
        }

        #toolbar table tr {
            transform: translateY(0);
            transition: transform 0.4s ease-out;
        }

        #toolbar table tr.up {
            transform: translateY(33px);
            transition: none;
        }

        #toolbar table tr.down {
            transform: translateY(-33px);
            transition: none;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="row">

            <div class="col-sm-3 col-md-3 main">

                <h1 class="page-header">Geodesignhub Subsurface Viewer</h1>
                <small>&copy; 2019 <a href="https://www.geodesignhub.com/">Geodesignhub</a>, see the <a
                        href="https://geodesignhub.github.io/SubsurfaceViewer">GitHub repository</a> for more
                    information.</small>
                <section class="information">
                    <div id="loadingGIF"><img src="/assets/objs/loading.gif">&nbsp;<span
                            id="procstatus">Processing</span>...</div>
                    <br>
                    <div id="systemsCBCont" style="display:none">
                        <h4>Systems</h4>
                        <table class="table" id="systemsCB"></table>
                    </div>
                    <br>


                </section>

                <div id='downloadLink' style='display:none'>
                    <h4>Download</h4>
                    <div>
                        <p><button class="button buttongreen" onclick="downloadGJ()">Download Data</button></p>
                    </div>
                </div>
            </div>

        </div>

        <div class="col-sm-9 col-md-9 sidebar">
            <div id="cesiumContainer"></div>
            <div id="toolbar">
                <table>
                    <tbody data-bind="foreach: layers">
                        <tr data-bind="css: { up: $parent.upLayer === $data, down: $parent.downLayer === $data }">
                            <td><input type="checkbox" data-bind="checked: show"></td>
                            <td>
                                <span data-bind="text: name, visible: !$parent.isSelectableLayer($data)"></span>
                                <select
                                    data-bind="visible: $parent.isSelectableLayer($data), options: $parent.baseLayers, optionsText: 'name', value: $parent.selectedLayer"></select>
                            </td>
                            <td>
                                <input type="range" min="0" max="1" step="0.01"
                                    data-bind="value: alpha, valueUpdate: 'input'">
                            </td>
                            <td><button type="button" class="cesium-button"
                                    data-bind="click: function() { $parent.raise($data, $index()); }, visible: $parent.canRaise($index())">▲</button>
                            </td>
                            <td><button type="button" class="cesium-button"
                                    data-bind="click: function() { $parent.lower($data, $index()); }, visible: $parent.canLower($index())">▼</button>
                            </td>
                        </tr>
                        <tr>
                            <td>Translucency enabled</td>
                            <td>
                              <input type="checkbox" data-bind="checked: translucencyEnabled">
                            </td>
                          </tr>
                          <tr>
                            <td>Fade by distance</td>
                            <td>
                              <input type="checkbox" data-bind="checked: fadeByDistance">
                            </td>
                          </tr>
                          
                          <tr>
                            <td>Alpha</td>
                            <td>
                              <input type="range" min="0.0" max="1.0" step="0.1" data-bind="value: alpha, valueUpdate: 'input'">
                              <input type="text" size="5" data-bind="value: alpha">
                            </td>
                          </tr>
                    </tbody>
                </table>
            </div>


        </div>
    </div>
    </div>

    <script>
        var apitoken = "<%= apitoken  %>"; //var test is now assigned to getTest which will only work on browsers
        var projectid = "<%= projectid %>"; //var test is now assigned to getTest which will only work on browsers 
        var diagramid = "<%= diagramid %>"; //var test is now assigned to getTest which will only work on browsers 
        var synthesisid = "<%= synthesisid %>"; //var test is now assigned to getTest which will only work on browsers  
        var cteamid = "<%= cteamid %>"; //var test is now assigned to getTest which will only work on browsers  
        var systems = <%- systems %>; //var test is now assigned to getTest which will only work on browsers  
        var gjresults = <%- result %>;
        var center = <%- center %>;
        var bounds = "<%= bounds %>";

        function changeOpacity() {
            var value = document.getElementById("btnImageryAlpha").value;
            // var alpha = activeLayer.alpha;
            if (viewer.imageryLayers) {
                for (var i = 0; i < viewer.imageryLayers.length; i++) {
                    viewer.imageryLayers.get(i).alpha = value / 10;
                }
            }
            console.log(value);
        }

        var viewer = new Cesium.Viewer('cesiumContainer', {
            "geocoder": false,
            "homeButton": false,
            "baseLayerPicker": false,
            "infoBox": false,
            "sceneModePicker": false,
            "animation": false,
            "selectionIndicator": false,
            "fullscreenButton": false,
            "timeline": false,
            "navigationHelpButton": false,

        });

        var imageryLayers = viewer.imageryLayers;
        var scene = viewer.scene;
        var globe = scene.globe;
        scene.screenSpaceCameraController.enableCollisionDetection = false;
            globe.translucency.frontFaceAlphaByDistance = new Cesium.NearFarScalar(
            400.0,
            0.0,
            800.0,
            1.0
            );
        var viewModel = {
            translucencyEnabled: true,
            fadeByDistance: true,
            alpha: 0.5,
            layers: [],
            baseLayers: [],
            upLayer: null,
            downLayer: null,
            selectedLayer: null,
            isSelectableLayer: function (layer) {
                return this.baseLayers.indexOf(layer) >= 0;
            },
            raise: function (layer, index) {
                imageryLayers.raise(layer);
                viewModel.upLayer = layer;
                viewModel.downLayer = viewModel.layers[Math.max(0, index - 1)];
                updateLayerList();
                window.setTimeout(function () {
                    viewModel.upLayer = viewModel.downLayer = null;
                }, 10);
            },
            lower: function (layer, index) {
                imageryLayers.lower(layer);
                viewModel.upLayer = viewModel.layers[Math.min(viewModel.layers.length - 1, index + 1)];
                viewModel.downLayer = layer;
                updateLayerList();
                window.setTimeout(function () {
                    viewModel.upLayer = viewModel.downLayer = null;
                }, 10);
            },
            canRaise: function (layerIndex) {
                return layerIndex > 0;
            },
            canLower: function (layerIndex) {
                return layerIndex >= 0 && layerIndex < imageryLayers.length - 1;
            }
        };
        var baseLayers = viewModel.baseLayers;

        Cesium.knockout.track(viewModel);

        function update() {
            globe.translucency.enabled = viewModel.translucencyEnabled;

            var alpha = Number(viewModel.alpha);
            alpha = !isNaN(alpha) ? alpha : 1.0;
            alpha = Cesium.Math.clamp(alpha, 0.0, 1.0);

            globe.translucency.frontFaceAlphaByDistance.nearValue = alpha;
            globe.translucency.frontFaceAlphaByDistance.farValue = viewModel.fadeByDistance
                ? 1.0
                : alpha;

            }
            update();


        function setupLayers() {
            // Create all the base layers that this example will support.
            // These base layers aren't really special.  It's possible to have multiple of them
            // enabled at once, just like the other layers, but it doesn't make much sense because
            // all of these layers cover the entire globe and are opaque.
            addBaseLayerOption(
                'Bing Maps Aerial',
                undefined); // the current base layer
            addBaseLayerOption(
                'Bing Maps Road',
                new Cesium.BingMapsImageryProvider({
                    url: 'https://dev.virtualearth.net',
                    mapStyle: Cesium.BingMapsStyle.AERIAL_WITH_LABELS,
                    key: 'Am2dMceshjeLX_Sogy2NHjJ8_yMBVWAm3b2x4LdV0hbAQZiFlkkD_FyoJEyApRm5'
                }));
            addBaseLayerOption(
                'Mapbox Streets',
                new Cesium.MapboxImageryProvider({
                    mapId: 'cygnus2936.curedn3y',
                    accessToken: 'pk.eyJ1IjoiY3lnbnVzMjkzNiIsImEiOiJjaWgzanBwY2YweTJvNHBtM2x5MjdtemxjIn0.bwFfvQYX-M2EPyK2aee8DQ'
                }));
            addAdditionalLayerOption(
                'Grid',
                new Cesium.GridImageryProvider(), 1.0, false);
            // addAdditionalLayerOption(
            //     'Tile Coordinates',
            //     new Cesium.TileCoordinatesImageryProvider(), 1.0, false);
        }


        function addBaseLayerOption(name, imageryProvider) {
            var layer;
            if (typeof imageryProvider === 'undefined') {
                layer = imageryLayers.get(0);
                viewModel.selectedLayer = layer;
            } else {
                layer = new Cesium.ImageryLayer(imageryProvider);
            }

            layer.name = name;
            baseLayers.push(layer);
        }

        function addAdditionalLayerOption(name, imageryProvider, alpha, show) {
            var layer = imageryLayers.addImageryProvider(imageryProvider);
            layer.alpha = Cesium.defaultValue(alpha, 0.5);
            layer.show = Cesium.defaultValue(show, true);
            layer.name = name;
            Cesium.knockout.track(layer, ['alpha', 'show', 'name']);
        }

        function updateLayerList() {
            var numLayers = imageryLayers.length;
            viewModel.layers.splice(0, viewModel.layers.length);
            for (var i = numLayers - 1; i >= 0; --i) {
                viewModel.layers.push(imageryLayers.get(i));
            }
        }

        setupLayers();
        updateLayerList();

        //Bind the viewModel to the DOM elements of the UI that call for it.
        var toolbar = document.getElementById('toolbar');
        Cesium.knockout.applyBindings(viewModel, toolbar);

        Cesium.knockout.getObservable(viewModel, 'selectedLayer').subscribe(function (baseLayer) {
            // Handle changes to the drop-down base layer selector.
            var activeLayerIndex = 0;
            var numLayers = viewModel.layers.length;
            for (var i = 0; i < numLayers; ++i) {
                if (viewModel.isSelectableLayer(viewModel.layers[i])) {
                    activeLayerIndex = i;
                    break;
                }
            }
            var activeLayer = viewModel.layers[activeLayerIndex];
            var show = activeLayer.show;
            var alpha = activeLayer.alpha;
            imageryLayers.remove(activeLayer, false);
            imageryLayers.add(baseLayer, numLayers - activeLayerIndex - 1);
            baseLayer.show = show;
            baseLayer.alpha = alpha;
            updateLayerList();
        });

        var allPolygons;

        function generateSystemCB(systems) {
            for (var x = 0; x < systems.length; x++) {
                $('#systemsCB').append('<tr><td class="systitle"><input name="sysCB" id=' + "'" + systems[x].sysname +
                    "'" + 'type="checkbox" checked/> <span class="square c-' + systems[x].syscolor.substring(1) +
                    '"></span>&nbsp;&nbsp;' + systems[x].sysname +
                    '</input>&nbsp;&nbsp;</td><td class="densitydetails"><h6 id=' + "'" + systems[x].sysname +
                    "-units'" + '><h6></td></tr>');
            }
        }

        function updateWorkerStatus(percentcomplete) {
            var pc = percentcomplete.toString() + '% processing completed';
            $("#procstatus").html(pc);

        }

        function setMapCenter(latlng) {

            // document.getElementById("ccontrols").style.visibility = "visible";
            // set new center
            latlng = latlng.split(',');
            var lng = latlng[0];
            var lat = latlng[1];

            cameralat = lat;
            cameralng = lng;
            camera = viewer.camera;

            var headingAngle = Cesium.Math.toRadians(20.0);
            var pitchAngle = Cesium.Math.toRadians(-45.0);
            camera.setView({
                destination: Cesium.Cartesian3.fromDegrees(lng, lat, 5000.0),
                orientation: {
                    heading: headingAngle,
                    pitch: pitchAngle,
                    roll: 0.0
                }
            });
        }

        var randomid = function () {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            })
        };



        function hexToRgb(hex) {

            // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
            var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex, function (m, r, g, b) {
                return r + r + g + g + b + b;
            });

            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }

        function updateGLData(gjsonData, isFiltered) {
            
            humane.log("Rendering Scene..", {
                addnCls: 'humane-flatty-success'
            });
            if (isFiltered) {
                viewer.dataSources.removeAll(true);
            }
            $("#loadingGIF").hide();
            $("#downloadLink").show();
            $("#procstatus").html("Processing..");
            // for projects
            
            var promise = Cesium.GeoJsonDataSource.load(gjsonData);
            promise.then(function (dataSource) {
                    viewer.dataSources.add(dataSource);
                    var allGeometryInstances = [];
                    var allpolicies = [];
                    //Get the array of entities
                    var entities = dataSource.entities.values;
                   
                    for (var i = 0; i < entities.length; i++) {
                        var curFeat = entities[i];
                        var min_height = 0;
                        var max_height = 0;
                        var curProps = curFeat.properties.getValue();
                        
                        if (curProps.hasOwnProperty('min_height')){                            
                         min_height = curProps.min_height;
                        }
                        if (curProps.hasOwnProperty('max_height')){
                            max_height = curProps.max_height;
                        }
                        
                        var rgb = hexToRgb(curProps.color);
                        var color;
                        if (curProps.isBuilding == 0) {
                            color = Cesium.Color.fromBytes(rgb.r, rgb.g, rgb.b, 100);
                        } else {
                            color = Cesium.Color.fromBytes(rgb.r, rgb.g, rgb.b);
                        }
                        // curFeat.polygon.perPositionHeight = true;
                            try {
                                curFeat.polygon.material = color;
                                curFeat.polygon.outline = true;
                                max_height = (max_height==0) ? 2:max_height;
                                // if (max_height ==0) {
                                    // var h = curFeat.polygon.height;
                                    // const heights = [90, -90, 300, -100, -20, 100];                               
                                    // max_height = heights[Math.floor(heights.length * Math.random())];
                                    // min_height = 0;
                                    // if (h == 'ag') {
                                    //     h = -20;
                                    // } else if (h == 'ug') {
                                    //     hg = -20;
                                    // } else if (h == 'og') {
                                    //     hg = 0;
                                    // } else {
                                    //     h = -30;
                                    // }
                                // }                           
                                // console.log(max_height, min_height);
                                curFeat.polygon.height = min_height;
                                curFeat.polygon.extrudedHeight = max_height;
                        }
                        catch(err){
                            // console.log("Not polygon")
                        }
                       try {                           
                            curFeat.polyline.material = color;
                            curFeat.polyline.outline = true;
                            max_height = (max_height==0) ? 2:max_height;
                            // if (max_height ===0) {
                                // var h = curFeat.polyline.height;
                                // const heights = [90, -90, 300, -100, -20, 100];
                                // max_height = heights[Math.floor(heights.length * Math.random())];
                                // min_height = 0;
                                
                                // if (h == 'ag') {
                                //     h = -20;
                                // } else if (h == 'ug') {
                                //     hg = -20;
                                // } else if (h == 'og') {
                                //     hg = 0;
                                // } else {
                                //     h = -30;
                                // }
                            // } 
                            // console.log(max_height, min_height);
                            curFeat.polyline.height = min_height;
                            curFeat.polyline.extrudedHeight = max_height;
                        }
                        catch(err){
                            // console.log("Not polyline");
                        }                   

                }
            }).otherwise(function (error) {
            //Display any errrors encountered while loading.
            // window.alert(error);
            console.log(error);
        });;
        }
    </script>
    <script>
        function processGeoms() {
            $("#loadingGIF").hide();
            if (gjresults.features.length > 0) {
                // $("#gjTA").text(JSON.stringify(gjresults));

                // inputGJ = JSON.stringify(gjresults);
                generateSystemCB(systems);

                // updateGLData(final3DGeoms, true);
                $('#systemsCBCont').show();
                // submitGJ();
                $('#systemsCB').click(function () {
                    var selectedsystems = [];
                    $('#systemsCB input:checked').each(function () {
                        selectedsystems.push($(this).attr('id'));
                    });

                    $("#loadingGIF").show();
                    var constrainWorker = new Worker('/assets/workers/constrainGeneratedFeatures.js');
                    constrainWorker.onerror = function (e) {
                        console.log('Error: Line ' + e.lineno + ' in ' + e.filename + ': ' + e.message);
                        $("#loadingGIF").hide();
                        humane.log("There was a error in processing, please try again.. ", {
                            addnCls: 'humane-flatty-error'
                        });
                    };
                    // console.log(selectedsystems);
                    constrainWorker.postMessage({
                        'allFeaturesList': JSON.stringify(gjresults),
                        'selectedsystems': JSON.stringify(selectedsystems),

                    });
                    constrainWorker.addEventListener('message', function (e) {
                        if (e.data.mode === 'status') {
                            updateWorkerStatus(e.data.percentcomplete);
                        } else {
                            updateGLData(JSON.parse(e.data.polygons), true);
                        }
                    }, false);

                });
            }

        }
        $("#loadingGIF").hide();
        var generatedData;
        (function () {
            if (apitoken !== "0" && projectid !== "0" && cteamid !== "0" && synthesisid !== "0") {
                if (center !== "0") {
                    processGeoms();
                    updateGLData(gjresults, false);

                    setMapCenter(center);
                } else {
                    $("#loadingGIF").show();
                }
            }

        })();
        (function (console) {
            console.save = function (data, filename) {
                if (!data) {
                    console.error('Console.save: No data')
                    return;
                }
                if (!filename) filename = 'generatedfootprints.geojson'
                if (typeof data === "object") {
                    data = JSON.stringify(data, undefined, 4)
                }
                var blob = new Blob([data], {
                        type: 'text/json'
                    }),
                    e = document.createEvent('MouseEvents'),
                    a = document.createElement('a')
                a.download = filename
                a.href = window.URL.createObjectURL(blob)
                a.dataset.downloadurl = ['text/json', a.download, a.href].join(':')
                e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0,
                    null)
                a.dispatchEvent(e)
            }
        })(console)

        function downloadGJ() {
            // filter out streets
            var gd = JSON.parse(generatedData);
            var filteredGJ = {
                "type": "FeatureCollection",
                "features": []
            };
            var gendataFeatlen = gd.features.length;
            for (var k = 0; k < gendataFeatlen; k++) {
                var curFeat = gd.features[k];
                var prop = curFeat.properties;
                if (prop.isStreet) {} else {
                    filteredGJ.features.push(curFeat);
                }
            }
            console.save(filteredGJ);

        }
    </script>
</body>

</html>